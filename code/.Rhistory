predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
playin2_winner <- furrr::future_pmap(.l = list(rep(seed7, 100), rep(seed8, 100)),
.f = predict_game_outcome)
playin2_winner <- furrr::future_pmap(.l = list(rep(seed7, 100), rep(seed8, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
print("made it here")
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
print("made it here")
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
###### Predict Conference Tournament faster #######
matchup_rf <- readRDS("../data/matchup_rf")
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
print("made it here")
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
library(randomForest)
results <- data.frame()
team_stats <- read_csv("../data/mens_stats.csv")
# Only keep important stats for predicting a game
team_stats <- team_stats %>%
select(team, year, game_id, o_reb_rate, d_reb_rate, off_rating:pace, ftf, ftf_opp)
# Need to look at stats after last game, since it doesn't include the game we're trying to predict.
team_stats <- team_stats %>%
group_by(team, year) %>%
mutate_at(.vars = vars(game_id:ftf_opp),
.funs = lag)
for (i in 2011:2022)
{
results <- results %>%
bind_rows(load_mbb_schedule(i) %>%
select(id, date, neutralSite, conferenceCompetition, notes_headline,
home.location, home.conferenceId, home.score, away.location,
away.name, away.conferenceId, away.score, season, tournamentId) %>%
mutate(id = as.integer(id),
home.conferenceId = as.integer(home.conferenceId),
away.conferenceId = as.integer(away.conferenceId)))
}
results <- results %>%
filter(is.na(tournamentId) | !(tournamentId %in% c(22, 11, 21, 35, 42)))
results <- results %>%
mutate(home_win = ifelse(home.score > away.score, 1, 0))
home_stats <- team_stats
away_stats <- team_stats
colnames(home_stats) <- paste0("home_", colnames(home_stats))
colnames(away_stats) <- paste0("away_", colnames(away_stats))
results <- results %>%
inner_join(home_stats, by = c("home.location" = "home_team", "id" = "home_game_id")) %>%
inner_join(away_stats, by = c("away.location" = "away_team", "id" = "away_game_id"))
# Model #
train_index <- sample(nrow(results), nrow(results) * 0.8, replace = F)
train <- results[train_index,]
test <- results[-train_index,]
train <- train %>%
select(home_win, neutralSite, home_o_reb_rate:home_ftf_opp, away_o_reb_rate:away_ftf_opp)
test <- test %>%
select(home_win, neutralSite, home_o_reb_rate:home_ftf_opp, away_o_reb_rate:away_ftf_opp)
train$home_win <- as.factor(train$home_win)
test$home_win <- as.factor(test$home_win)
tictoc::tic()
matchup_rf <- randomForest(home_win ~ ., train)
tictoc::toc()
summary(matchup_rf)
pred <- predict(matchup_rf, newdata = test)
mean(pred == test$home_win)
saveRDS(matchup_rf, "../data/matchup_rf.RDS")
at_large_rf <- readRDS("../data/at_large_rf.RDS")
###### Predict Conference Tournament faster #######
matchup_rf <- readRDS("../data/matchup_rf.RDS")
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
View(stats)
reb <- read_csv("../data/reb_rates.csv")
record <- read_csv("../data/records.csv")
net <- read_csv("../data/net_ratings.csv")
sos <- read_csv("../data/sos_ratings.csv")
teams_conf <- read_csv("../data/team_conferences.csv")
to <- read_csv("../data/team_to_rates.csv")
steal <- read_csv("../data/team_steal_rates.csv")
pace <- read_csv("../data/team_pace.csv")
event <- read_csv("../data/eligible_game_ids.csv")
ftf <- read_csv("../data/ft_factor.csv")
conf_bids <- read_csv("../data/conf_bids.csv")
stats <- reb %>%
inner_join(record, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(net, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(sos, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(teams_conf, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(to, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(steal, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(pace, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(event, by = c("game_id" = "id")) %>%
inner_join(ftf, by = c("team" = "team", "game_id" = "game_id")) %>%
inner_join(conf_bids, by = c("conference" = "conference"))
View(stats)
conf_stats <- stats %>%
filter(game_date < lubridate::ymd("2022-03-01"), conference == "Big 12", year == 2022) %>%
group_by(team) %>%
summarize(conf_wins = last(conf_wins),
conf_losses = last(conf_losses),
o_reb_rate = last(o_reb_rate),
d_reb_rate = last(d_reb_rate),
off_rating = last(off_rating),
def_rating = last(def_rating),
net_rating = last(net_rating),
sos_off = last(sos_off),
sos_def = last(sos_def),
sos_net = last(sos_net),
to_rate_off = last(to_rate_off),
to_rate_def = last(to_rate_def),
steal_rate = last(steal_rate),
opp_steal_rate = last(opp_steal_rate),
pace = last(pace),
ftf = last(ftf),
ftf_opp = last(ftf_opp)) %>%
mutate(conference = this_conference)
standings <- conf_stats %>%
arrange(desc(conf_wins)) %>%
mutate(conf_seed = 1:n())
num_teams <- max(standings$conf_seed)
seed10 <- standings %>% filter(conf_seed == 10) %>% pull(team)
seed9 <- standings %>% filter(conf_seed == 9) %>% pull(team)
seed8 <- standings %>% filter(conf_seed == 8) %>% pull(team)
seed7 <- standings %>% filter(conf_seed == 7) %>% pull(team)
seed6 <- standings %>% filter(conf_seed == 6) %>% pull(team)
seed5 <- standings %>% filter(conf_seed == 5) %>% pull(team)
seed4 <- standings %>% filter(conf_seed == 4) %>% pull(team)
seed3 <- standings %>% filter(conf_seed == 3) %>% pull(team)
seed2 <- standings %>% filter(conf_seed == 2) %>% pull(team)
seed1 <- standings %>% filter(conf_seed == 1) %>% pull(team)
#  Largest conference is 16
# Smallest conference is 6
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
conf_stats <- stats %>%
filter(game_date < lubridate::ymd("2022-03-01"), conference == "Big 12", year == 2022) %>%
group_by(team) %>%
summarize(conf_wins = last(conf_wins),
conf_losses = last(conf_losses),
o_reb_rate = last(o_reb_rate),
d_reb_rate = last(d_reb_rate),
off_rating = last(off_rating),
def_rating = last(def_rating),
net_rating = last(net_rating),
sos_off = last(sos_off),
sos_def = last(sos_def),
sos_net = last(sos_net),
to_rate_off = last(to_rate_off),
to_rate_def = last(to_rate_def),
steal_rate = last(steal_rate),
opp_steal_rate = last(opp_steal_rate),
pace = last(pace),
ftf = last(ftf),
ftf_opp = last(ftf_opp)) %>%
mutate(conference = this_conference)
standings <- conf_stats %>%
arrange(desc(conf_wins)) %>%
mutate(conf_seed = 1:n())
num_teams <- max(standings$conf_seed)
seed10 <- standings %>% filter(conf_seed == 10) %>% pull(team)
seed9 <- standings %>% filter(conf_seed == 9) %>% pull(team)
seed8 <- standings %>% filter(conf_seed == 8) %>% pull(team)
seed7 <- standings %>% filter(conf_seed == 7) %>% pull(team)
seed6 <- standings %>% filter(conf_seed == 6) %>% pull(team)
seed5 <- standings %>% filter(conf_seed == 5) %>% pull(team)
seed4 <- standings %>% filter(conf_seed == 4) %>% pull(team)
seed3 <- standings %>% filter(conf_seed == 3) %>% pull(team)
seed2 <- standings %>% filter(conf_seed == 2) %>% pull(team)
seed1 <- standings %>% filter(conf_seed == 1) %>% pull(team)
#  Largest conference is 16
# Smallest conference is 6
champs <- c()
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
matchup_rf $mtry
matchup_rf$votes
matchup_rf$forest
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
team1 <- "Iowa State"
team2 <- "Baylor"
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- stats::predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
playin1_winner <- furrr::future_pmap(.l = list(rep(model, 100), rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
playin1_winner <- furrr::future_pmap(.l = list(rep(matchup_rf, 100), rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
predict_game_outcome <- function(model, team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- stats::predict(model, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(matchup_rf, 100), rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
matchup_rf <- readRDS("../data/matchup_rf.RDS")
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- stats::predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(object = matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
future::plan("multisession")
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
###### Predict Conference Tournament faster #######
library(randomForest)
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(object = matchup_rf, newdata = input, type = "prob")[1]
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
predict_game_outcome <- function(team1, team2)
{
team1_data <- conf_stats %>%
filter(team == team1)
team2_data <- conf_stats %>%
filter(team == team2)
colnames(team1_data) <- paste0("home_", colnames(team1_data))
colnames(team2_data) <- paste0("away_", colnames(team2_data))
input <- team1_data %>% bind_cols(team2_data) %>%
mutate(neutralSite = T)
team1_wp <- predict(matchup_rf, newdata = input, type = "prob")[1]
pr <- runif(1)
if (team1_wp <= pr)
{
return(team1)
}
else
{
return(team2)
}
}
tictoc::tic()
playin1_winner <- furrr::future_pmap(.l = list(rep(seed9, 100), rep(seed10, 100)),
.f = predict_game_outcome,
.options = furrr::furrr_options(seed = TRUE))
tictoc::toc()
rlang::last_error()
